---
# yamllint disable rule:line-length
name: Installer
# yamllint disable-line rule:truthy
on:
    push:
        paths:
            - 'crate_anon/**'
            - .github/workflows/installer.yml
            - 'docker/**'
            - 'installer/**'
            - setup.py
jobs:
    installer:
        runs-on: ubuntu-latest
        env:
            DB_RESEARCH_DATABASE: research
            DB_RESEARCH_USER: research
            DB_RESEARCH_PASSWORD: research
            DB_SECRET_DATABASE: secret
            DB_SECRET_USER: secret
            DB_SECRET_PASSWORD: secret
            DB_SOURCE_DATABASE: source
            DB_SOURCE_USER: source
            DB_SOURCE_PASSWORD: source
            DB_ROOT_USER: root
            DB_ROOT_PASSWORD: root

        steps:
            - uses: actions/checkout@v2

            - name: Set up MySQL
              run: |
                  set -euxo pipefail
                  sudo apt-get update
                  sudo apt -y install gnutls-bin
                  sudo sed -i "s/^bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/mysql.conf.d/mysqld.cnf
                  cat /etc/mysql/mysql.conf.d/mysqld.cnf
                  sudo service mysql start
                  mysql -e 'CREATE DATABASE ${{ env.DB_RESEARCH_DATABASE }};' -u${{ env.DB_ROOT_USER  }} -p${{ env.DB_ROOT_PASSWORD }}
                  mysql -e 'CREATE USER `${{ env.DB_RESEARCH_USER }}`@`%` IDENTIFIED WITH mysql_native_password BY "${{ env.DB_RESEARCH_PASSWORD }}";' -u${{ env.DB_ROOT_USER  }} -p${{ env.DB_ROOT_PASSWORD }}
                  mysql -e 'GRANT ALL PRIVILEGES ON `${{ env.DB_RESEARCH_DATABASE }}`.* TO `${{ env.DB_RESEARCH_USER }}`@`%`;' -u${{ env.DB_ROOT_USER }} -p${{ env.DB_ROOT_PASSWORD }}
                  mysql -e 'CREATE DATABASE ${{ env.DB_SECRET_DATABASE }};' -u${{ env.DB_ROOT_USER  }} -p${{ env.DB_ROOT_PASSWORD }}
                  mysql -e 'CREATE USER `${{ env.DB_SECRET_USER }}`@`%` IDENTIFIED WITH mysql_native_password BY "${{ env.DB_SECRET_PASSWORD }}";' -u${{ env.DB_ROOT_USER  }} -p${{ env.DB_ROOT_PASSWORD }}
                  mysql -e 'GRANT ALL PRIVILEGES ON `${{ env.DB_SECRET_DATABASE }}`.* TO `${{ env.DB_SECRET_USER }}`@`%`;' -u${{ env.DB_ROOT_USER }} -p${{ env.DB_ROOT_PASSWORD }}
                  mysql -e 'CREATE DATABASE ${{ env.DB_SOURCE_DATABASE }};' -u${{ env.DB_ROOT_USER  }} -p${{ env.DB_ROOT_PASSWORD }}
                  mysql -e 'CREATE USER `${{ env.DB_SOURCE_USER }}`@`%` IDENTIFIED WITH mysql_native_password BY "${{ env.DB_SOURCE_PASSWORD }}";' -u${{ env.DB_ROOT_USER  }} -p${{ env.DB_ROOT_PASSWORD }}
                  mysql -e 'GRANT ALL PRIVILEGES ON `${{ env.DB_SOURCE_DATABASE }}`.* TO `${{ env.DB_SOURCE_USER }}`@`%`;' -u${{ env.DB_ROOT_USER }} -p${{ env.DB_ROOT_PASSWORD }}

            - name: Build
              run: |
                  set -euxo pipefail
                  sudo apt-get update
                  sudo apt -y install python3-virtualenv python3-venv
                  # TODO: wget this from releases as a normal user would
                  # and don't checkout above
                  docker --version
                  export CRATE_DOCKER_MYSQL_HOST_PORT=3307
                  export CRATE_DOCKER_CONFIG_HOST_DIR=${HOME}/crate_config
                  export CRATE_DOCKER_GATE_BIOYODIE_RESOURCES_HOST_DIR=${HOME}/bioyodie_resources
                  export CRATE_DOCKER_MYSQL_CRATE_USER_PASSWORD=ramalamadingdong
                  export CRATE_DOCKER_MYSQL_ROOT_PASSWORD=shoobydoobydoo
                  export CRATE_DOCKER_INSTALL_USER_ID=$(id -u)
                  export CRATE_DOCKER_INSTALL_GROUP_ID=$(id -g)
                  export CRATE_DOCKER_DJANGO_SUPERUSER_USERNAME=admin
                  export CRATE_DOCKER_DJANGO_SUPERUSER_PASSWORD=servisolironcamera
                  export CRATE_DOCKER_DJANGO_SUPERUSER_EMAIL=admin@example.com
                  export CRATE_DOCKER_CRATEWEB_HOST_PORT=8000
                  cd ${GITHUB_WORKSPACE}/installer
                  ./installer.sh
            - name: Test
              run: |
                cd ${GITHUB_WORKSPACE}/docker/dockerfiles
                docker compose logs
                SERVER_IP=$(docker inspect crate_crate_server --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}')
                curl -I -L --retry 10 --retry-connrefused --fail $SERVER_IP:8000
                curl -I -L --fail $SERVER_IP:8000/crate_static/scrubber.png
