===============================================================================
Early thoughts preceding Django, starting 19 Mar 2015
===============================================================================

    - output roughly sketched out
    - WSGI framework drafted

    - needs safe SQL creation framework
        - easy to make something too fiddly: http://www.ajaxquerybuilder.com/
    - needs session, security/users, main menu, audit
    - user accessing the destination database must be READ ONLY here

This kind of queries that might benefit from some autogeneration:

    SELECT
        master.rid, master.dob, ...
        secondtable.field1, secondtable.field2, ...
        thirdtable.field1, thirdtable.field2, ...
    FROM
        master
        INNER JOIN secondtable ON (secondtable.rid = master.rid)
        INNER JOIN thirdtable ON (thirdtable.rid = master.rid)
    WHERE
        MATCH(secondtable.field1) AGAINST ('schizophrenia')
        OR MATCH(thirdtable.field1) AGAINST ('schizophrenia')

However, it's not clear anything really improves on writing raw SQL; most
assisted query generation frameworks are quite crippled functionally. Simple
SQL also has the advantage of producing a clear tabular structure, without
nesting.

===============================================================================
SITE-SPECIFIC CONFIGURATION FILES FOR DJANGO
===============================================================================

Several methods; e.g.
    https://code.djangoproject.com/wiki/SplitSettings#ini-stylefilefordeployment
    https://code.djangoproject.com/wiki/SplitSettings#Multiplesettingfilesimportingfromeachother
The question is which works best with WSGI, where we have public (repository)
code and secret (site-specific) settings, and in principle might want to run
more than one instance of the application on a single server.

Using Apache's SetEnv and then reading the WSGI environment (as I currently do
for CamCOPS, Sep 2015) can be flaky with Django, so should be avoided:
    http://stackoverflow.com/questions/19754834/access-apache-setenv-variable-from-django-wsgi-py-file
Note that it appears possible, and lots of people advocate it, but Graham D.'s
point is cautionary, and he wrote mod_wsgi.

Therefore, follow Graham Dumpleton's suggestion, e.g. as follows:

- hard-code the filename 'crate_local_settings.py', so that the Django
  settings.py does 'from crate_local_settings import *'
- define settings for multiple apps by creating e.g.
    /etc/crate_instance_1/crate_local_settings.py
    /etc/crate_instance_2/crate_local_settings.py
- set the WSGI "python-path" (more or less equivalent to the normal environment
  variable PYTHONPATH) to include the relevant /etc/[something] directory

===============================================================================
DJANGO PROJECT
===============================================================================

# -----------------------------------------------------------------------------
# SYSTEM-WIDE OPTIONAL EXTRAS
# -----------------------------------------------------------------------------

sudo apt-get install sqliteman

# -----------------------------------------------------------------------------
# VIRTUALENV; PYTHON PREREQUISITES
# -----------------------------------------------------------------------------

# (a) System-wide installation of pip and virtualenv

sudo apt-get install python3-pip  # pip for Python 3
sudo pip3 install virtualenv  # Python 3 version of virtualenv

# (b) Creation of clean Python 3 virtual environment, with its own pip

export VENV=~/tmp/crate_virtualenv
mkdir -p $VENV
virtualenv --python=/usr/bin/python3.4 $VENV
export PIP=$VENV/bin/pip
export PYTHON=$VENV/bin/python

# (c) Installation of packages into virtual environment

$PIP install django  # Django
export DJANGO_ADMIN=$VENV/bin/django-admin.py
$PIP install mysqlclient  # Python 3 replacement for MySQLdb
$PIP install django-sslserver  # SSL development server
$PIP install django-picklefield  # PickleField

# -----------------------------------------------------------------------------
# DJANGO PROJECT CREATION
# -----------------------------------------------------------------------------

# Check versions
$PYTHON -c "import django; print(django.get_version())"
$DJANGO_ADMIN version
# ... is currently 1.8.4

$DJANGO_ADMIN startproject crateweb

# Edit manage.py, changing
#       #!/usr/bin/env python
# to
#       #!/usr/bin/env python
# ... or Python 2 and an old version of Django may be used.

# -----------------------------------------------------------------------------
# DJANGO PROJECT MANAGEMENT
# -----------------------------------------------------------------------------

export CRATE_BASE=~/Documents/code/crate
export CRATE_DJANGO_ROOT=$CRATE_BASE/webfrontend/crateweb
export CRATE_MANAGE="$PYTHON $CRATE_DJANGO_ROOT/manage.py"
. $CRATE_BASE/webfrontend/SET_PATHS.sh
$CRATE_MANAGE  # shouldn't produce an error

-------------------------------------------------------------------------------
RUN TEST SERVER
-------------------------------------------------------------------------------

# For HTTP:
$CRATE_MANAGE runserver
# ... now browse to http://127.0.0.1:8000/

# For HTTPS (having installed/configured django-sslserver)
$CRATE_MANAGE runsslserver
# ... now browse to https://127.0.0.1:8000/

-------------------------------------------------------------------------------
GRANT READ-ONLY ACCESS TO MYSQL RESEARCH DATABASE
-------------------------------------------------------------------------------

mysql -u root -p
mysql> GRANT SELECT ON anonymous_output.* TO 'researcher'@'localhost' IDENTIFIED BY 'password';

-------------------------------------------------------------------------------
CREATE/RECREATE TABLES
-------------------------------------------------------------------------------

# If models have changed:
$CRATE_MANAGE makemigrations [appname]

# To see what it'll do, e.g.
$CRATE_MANAGE sqlmigrate research 0001  # ... appname, migration_number

# Then:
$CRATE_MANAGE migrate

-------------------------------------------------------------------------------
CREATE APP
-------------------------------------------------------------------------------

cd $CRATE_DJANGO_ROOT
$CRATE_MANAGE startapp research
# now add it to INSTALLED_APPS in settings.py

-------------------------------------------------------------------------------
EXPLORE APP FROM COMMAND LINE
-------------------------------------------------------------------------------

$CRATE_MANAGE shell
# See https://docs.djangoproject.com/en/1.8/intro/tutorial01/

-------------------------------------------------------------------------------
CREATE SUPERUSER
-------------------------------------------------------------------------------

$CRATE_MANAGE createsuperuser

# Now run the demo server and go to http://127.0.0.1:8000/admin/

-------------------------------------------------------------------------------
TUTORIALS
-------------------------------------------------------------------------------

- https://docs.djangoproject.com/en/1.8/intro/tutorial01/
- https://www.youtube.com/watch?v=oT1A1KKf0SI&list=PLxxA5z-8B2xk4szCgFmgonNcCboyNneMD&index=1

-------------------------------------------------------------------------------
USER PROFILES
-------------------------------------------------------------------------------

# http://stackoverflow.com/questions/19433630/how-to-use-user-as-foreign-key-in-django-1-5
# https://docs.djangoproject.com/en/dev/topics/auth/customizing/#referencing-the-user-model
# https://www.youtube.com/watch?v=qLRxkStiaUg&list=PLxxA5z-8B2xk4szCgFmgonNcCboyNneMD&index=22

cd $CRATE_DJANGO_ROOT
$CRATE_MANAGE startapp userprofile
# edit settings.py (a) INSTALLED_APPS; (b) AUTH_PROFILE_MODULE = 'userprofile.UserProfile'

-------------------------------------------------------------------------------
GENERAL DJANGO ADVICE
-------------------------------------------------------------------------------
Cheat sheet: http://www.mercurytide.co.uk/news/article/django-15-cheat-sheet/

Collected tips: http://stackoverflow.com/questions/550632/favorite-django-tips-features
... including:

    $CRATE_MANAGE graph_models -a -g -o crate_model_diagram.png

    $CRATE_MANAGE runserver_plus
    assert False somewhere; then use the Werkzeug console to explore

===============================================================================
CONSENT-MODE DATABASE
===============================================================================
- General principle to avoid storing BLOBs in databases, to keep the database
  small, and to allow static file serving. With Django, for private static
  files, that may need something like X-Sendfile:
    http://zacharyvoase.com/2009/09/08/sendfile/
    http://django-private-files.readthedocs.org/en/0.1.2/serverconf.html
    ... Apache with mod_xsendfile
    http://stackoverflow.com/questions/1156246/having-django-serve-downloadable-files
- However, we do want to concatenate PDFs to make packages for clinicians.
  Though not necessarily very often.
- Outbound e-mails can be stored as text (e.g. HTML).
- Letters could be stored as PDFs (e.g. files) or as the HTML used to generate
  the PDF (smaller; reproducible exactly unless e.g. the header changes).



If you drop a table, or want to drop a table:
    http://stackoverflow.com/questions/5328053/how-to-restore-dropped-table-with-django-south

===============================================================================
CSS MODEL
===============================================================================
- Static or template-based?
  Since we want consistency across web/email/PDF (inc. the web aspects of
  clinicians responding to e-mails), and since we have to embed CSS for email,
  we'll embed the lot and use templates.

- CSS selector tutorial:
  http://css.maxdesign.com.au/selectutorial/selectors_class.htm

===============================================================================
GENERAL DJANGO NOTES FOR URL/'GET' INFORMATION-PASSING:
===============================================================================
1. URL path
    - create in code with reverse()
    - encapsulate the output of reverse() in request.build_absolute_uri()
      to get an absolute URI with site domain name, etc.
    - details are read back by the urlconf regexes (in urls.py) and passed
      to views as parameters
    - validation is "manual" e.g. using
        study = get_object_or_404(Study, pk=study_id)
        if not custom_is_valid_function(extraparam):
            raise Http404('error message')
    - ... or could validate manually with a form, e.g.
        form = MyForm(request.GET, extraparam)
      using the style at
        http://stackoverflow.com/questions/18769607/django-form-with-customer-parameter-and-validation-not-getting-clean-function  # noqa

2. Query parameters
    - can encode using urllib, e.g.
        def url_with_querystring(path, **kwargs):
            return path + '?' + urllib.urlencode(kwargs)
    - ?BETTER is to encode using Django's QueryDict and its urlencode()
      method:
        q = QueryDict(mutable=True)
        q['key'] = value
        querybits = q.urlencode()
    - read them like this:
        request.GET.get('key', 'defaultvalue')
    - or could read/validate them with a form and its validators:
        form = MyForm(request.GET):
        # ... might use a ChoiceField or other validators
        if form.is_valid():
            ...
        else:
            ...

3. Combining them
    "{path}?{querystring}".format(
        path=request.build_absolute_uri(reverse(...)),
        querystring=querydict.urlencode()
    )
    ... etc ...

4. Which is best?
    - path parameters:
        best for fixed resource lookup
        elegant handling in Django; DRY
    - query parameters:
        best for display modification
        order can vary
        they can be optional
        form-based validation is simpler
    - sometimes either works

5. But if we're building a Django object...
    - consider a ModelForm
    - slide
        35 - basic pattern
        86 - unit testing
        99 - dynamically adding fields
      of http://www.slideshare.net/pydanny/advanced-django-forms-usage
      BUT SEE
        http://www.pydanny.com/the-easy-form-views-pattern-controversy.html
      ... use this:
        request.POST if request.method == 'POST' else None
      not this:
        request.POST or None

http://stackoverflow.com/questions/2345708/how-can-i-get-the-full-absolute-url-with-domain-in-django  # noqa
http://stackoverflow.com/questions/150505/capturing-url-parameters-in-request-get  # noqa
http://stackoverflow.com/questions/2778247/how-do-i-construct-a-django-reverse-url-using-query-args  # noqa
http://whippleit.blogspot.co.uk/2010/10/pretty-urls-vs-query-strings.html
http://stackoverflow.com/questions/3821663/querystring-in-rest-resource-url
http://stackoverflow.com/questions/9399147/django-form-validation-with-get

===============================================================================
Back-end processing: Celery
===============================================================================
- High-end optimum broker for Celery is perhaps RabbitMQ.
  Can persist messages to disk (or say you don't care).
  But moderately complex.
- Simpler is Celery with the Django database backend as the broker.
  And we have a very low volume of traffic.

http://docs.celeryproject.org/en/latest/getting-started/brokers/django.html#broker-django

- pip install celery
- in Django settings.py
    BROKER_URL = 'django://'
    CELERY_ACCEPT_CONTENT =  ['json']
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TASK_SERIALIZER = 'json'
    INSTALLED_APPS should include 'kombu.transport.django'
- manage.py migrate
    ... will make tables djkombu_message, djkombu_queue
- follow http://docs.celeryproject.org/en/latest/django/first-steps-with-django.html

- to run a debugging worker:
    cd .../crateweb
    celery -A consent worker --loglevel=debug

- NOTE difficulty with PYTHONPATH
    ... if PYTHONPATH includes .../crate and .../crate/crateweb,
    Django moans when you start about duplicate filesystem locations.
    ... if it only includes .../crate and you start Celery from a random
    location with "crateweb.consent" as the module name, it can't find
    other Django bits like "userprofile".
    ... so the above seems simplest.
    ... and celery also says you have to:
        http://docs.celeryproject.org/en/latest/getting-started/next-steps.html#next-steps

- Anyway, success now.

- However, database is going to grow (old messages not pruned).
  Generally true? I'm unclear; https://github.com/celery/kombu/issues/276

  Let's try RabbitMQ.

    sudo apt-get install rabbitmq-server
    # ... will autostart service

  Easy. Also, much snappier.

  Will start with localhost-only access via the "guest" account:
    https://www.rabbitmq.com/access-control.html

  Status:
    sudo rabbitmqctl status
    sudo rabbitmqctl report


===============================================================================
mod_wsgi-express, etc.
===============================================================================

# http://blog.dscpl.com.au/2015/04/introducing-modwsgi-express.html
# http://blog.dscpl.com.au/2015/04/using-modwsgi-express-with-django.html
# http://blog.dscpl.com.au/2015/04/integrating-modwsgi-express-as-django.html
# http://blog.dscpl.com.au/2015/05/using-modwsgi-express-as-development.html
# https://pypi.python.org/pypi/mod_wsgi
# https://gist.github.com/GrahamDumpleton/b79d336569054882679e

# https://opensourcemissions.wordpress.com/2010/03/12/finally-a-working-django-non-root-url-with-mod_wsgi/
# https://groups.google.com/forum/#!topic/django-users/xFdZnKq26H0
# https://code.djangoproject.com/ticket/8906

# http://stackoverflow.com/questions/30566836/how-to-autostart-apachectl-script-that-mod-wsgi-express-made-for-django

===============================================================================
Celery (etc.) as daemon, and overall stack
===============================================================================

Most convenient to use supervisor/django-supervisor?
    http://stackoverflow.com/questions/14275821/how-to-run-celery-as-a-daemon-in-production
Supervisor won't install via pip for Python 3. It's Python 2 only at present:
    http://supervisord.org
However, it is an Ubuntu package (supervisor).
Then we can use django-supervisor.
    ... or maybe not; the installation is difficult.

The "raw" Celery methods are:
    http://docs.celeryproject.org/en/latest/tutorials/daemonizing.html#daemonizing
    http://docs.celeryproject.org/en/latest/getting-started/next-steps.html#next-steps

Possibly just follow this, which is clear:
    http://www.apreche.net/complete-single-server-django-stack-tutorial/

supervisord / PYTHONPATH
    http://stackoverflow.com/questions/7930259/supervisor-running-a-python-script-pythonpath-issue

===============================================================================
Overall stack
===============================================================================

- We want very simple installation.
- Happy to mandate Ubuntu/Debian for now. (CentOS is a pain, for a start.)
- Several components of the stack auto-run (Apache; RabbitMQ).
- No pressing reason not to run "proper" Apache.
  Alternative include "standalone" Apache via mod_wsgi-express, which would
  need daemonizing; other similar Python-based servers like nginx/gunicorn
- If Apache is used, then that keeps the Django bit up and running.
- Only other bit that needs daemonizing is Celery; we can daemonize that with
  supervisord (which can be installed via Ubuntu).
  Once configured, this works beautifully.

  For monitoring, can use:
    sudo supervisorctl

- So installation process would be:

    sudo gdebi --non-interactive PACKAGE
    ... ensure Ubuntu requirements
        ... makes RabbitMQ happen automatically
        ... Apache configuration is the user's business (but we offer instructions)
    ... install code to /usr/share/crate
    ... create virtualenv in /usr/share/crate/virtualenv
        using sub-script install_virtualenv.sh
        parameters:
            (1) virtualenv: /usr/share/crate/virtualenv
            (2) secrets: /etc/crate
        ... ensure Python package requirements
        ... create specimen /etc/crate/crate_local_settings.py
        ... create customized instructions.txt for Apache, supervisord
    ... create some scripts in /usr/share/crate
        - launch demo Django server
        - launch debugging Celery backend
    ... restart supervisor
    ... restart Apache, if running

- The other possibility might be to run a separate web server and proxy it from Apache, e.g.
    http://stackoverflow.com/questions/6418016/gunicorn-via-mod-proxy-is-redirecting-outside-of-the-projects-scope-despite-pr
    http://serverfault.com/questions/429404/help-me-understand-how-to-use-proxypass
    http://blog.endpoint.com/2013/04/making-ssl-work-with-django-behind.html
  It adds another thing to fall over, but it would allow Apache to run without
  restarting even when Python apps need to be restarted (a positive...).
  Plus it would allow non-root running more simply, since port 80 is restricted.
  And it minimizes the amount of Apache configuration required from the end user.
  And it makes "development versus production" simpler.
  It also has the consequence that we don't have mod_wsgi tied to a specific
  Python version, which is a massive pain.
- OK. Let's give it a go with gunicorn.

    http://michal.karzynski.pl/blog/2013/06/09/django-nginx-gunicorn-virtualenv-supervisor/

Unix domain sockets

- Working
- However, Django debug toolbar stops working

    https://github.com/django-debug-toolbar/django-debug-toolbar/issues/690
    https://github.com/benoitc/gunicorn/issues/797

    ... see fix to INTERNAL_IPS, which is a bit bizarre, in the specimen
    config file.

SSL proxy

    https://bharatikunal.wordpress.com/2010/12/01/howto-reverseproxy-to-https-in-apache/





-------------------------------------------------------------------------------
NOT THE SIMPLEST: To use Apache with mod_wsgi
-------------------------------------------------------------------------------
# ... we'll skip this.

(a) Add Ubuntu prerequisites

    sudo apt-get install apache2 libapache2-mod-wsgi-py3 libapache2-mod-xsendfile

(b) Configure Apache for CRATE.
    Use a section like this in the Apache config file:

<VirtualHost *:80>
    # ...

    # =========================================================================
    # CRATE
    # =========================================================================

    # Define a process group (using the specimen name crate_pg)
    # Must use threads=1 (code may not be thread-safe).
    # Example here with 5 processes.
    WSGIDaemonProcess crate_pg processes=5 threads=1 python-path=$SITE_PACKAGES:$DEST_DJANGO_ROOT:$SECRETS_DIR

    # Point a particular URL to a particular WSGI script (using the specimen path /crate)
    WSGIScriptAlias /crate $DEST_DJANGO_ROOT/config/wsgi.py process-group=crate_pg

    # Redirect requests for static files, and admin static files.
    # MIND THE ORDER - more specific before less specific.
    Alias /static/admin/ $SITE_PACKAGES/django/contrib/admin/static/admin/
    # Alias /static/debug_toolbar/ $SITE_PACKAGES/debug_toolbar/static/debug_toolbar/
    Alias /static/ $DEST_DJANGO_ROOT/static/

    # Make our set of processes use a specific process group
    <Location /crate>
        WSGIProcessGroup crate_pg
    </Location>

    # Allow access to the WSGI script
    <Directory $DEST_DJANGO_ROOT/config>
        <Files "wsgi.py">
            Require all granted
        </Files>
    </Directory>

    # Allow access to the static files
    <Directory $DEST_DJANGO_ROOT/static>
        Require all granted
    </Directory>

    # Allow access to the admin static files
    <Directory $SITE_PACKAGES/django/contrib/admin/static/admin>
        Require all granted
    </Directory>

    # Allow access to the debug toolbar static files
    # <Directory $SITE_PACKAGES/debug_toolbar/static/debug_toolbar>
    #     Require all granted
    # </Directory>

</VirtualHost>

(c) Additionally, install mod_xsendfile, e.g. (on Ubuntu):

        sudo apt-get install libapache2-mod-xsendfile

    ... which will implicitly run "a2enmod xsendfile" to enable it. Then add to
    the Apache config file in an appropriate place:

        # Turn on XSendFile
        <IfModule mod_xsendfile.c>
            XSendFile on
            XSendFilePath /MY/SECRET/CRATE/FILE/ZONE
            # ... as configured in your secret crate_local_settings.py
        </IfModule>

- If you get problems, check the log, typically /var/log/apache2/error.log
- If it's a permissions problem, check the www-data user can see the file:
    sudo -u www-data cat FILE
    # ... using an absolute path
    groups USER
- If Chrome fails to load GIFs and says "pending" in the Network developer
  view, restart Chrome. (Probably only a "caching of failure" during
  development!)

-------------------------------------------------------------------------------
Standalone Apache with mod_wsgi-express
-------------------------------------------------------------------------------

    pip install mod_wsgi-httpd  # a bit slow; don't worry
    pip install mod_wsgi

    mod_wsgi-express start-server config.wsgi \\
        --application-type module \\
        --log-to-terminal \\
        --port 80 \\
        --processes 5 \\
        --python-path $SECRETS_DIR \\
        --threads 1 \\
        --url-alias /static $DEST_DJANGO_ROOT/static \\
        --working-directory $DEST_DJANGO_ROOT

- This changes to the working directory and uses config/wsgi.py
- Add --reload-on-changes for debugging.
- Port 80 will require root privilege.


===============================================================================
Versioning
===============================================================================

versioning (think for CamCOPS and for consent mode)

https://www.djangopackages.com/grids/g/versioning/
    Python 3 support and production/stable -- narrows to
        Django Reversion
        django-simple-history
    ... of which Django Reversion looks best, as it can "version"
        relationships.

===============================================================================
Making the debug toolbar appear in different settings
===============================================================================

# If you want to use the Django debug toolbar while proxying (e.g. between
# gunicorn and Apache) through a Unix domain socket, this will wipe out
# REMOTE_ADDR, which is checked in debug_toolbar.middleware.show_toolbar .
# Bizarrely, while at first glance it looks like b'', it's actually "b''"!
# So you would need this:
#
# INTERNAL_IPS = (
#     '127.0.0.1',  # for port proxy
#     "b''",  # for Unix domain socket proxy
# )
#
# An alternative is to set DEBUG_TOOLBAR_CONFIG as per
# http://stackoverflow.com/questions/28226940/django-debug-toolbar-wont-display-from-production-server  # noqa
# Like this:

def always_show_toolbar(request):
    return True # Always show toolbar, for example purposes only.

DEBUG_TOOLBAR_CONFIG = {
    'SHOW_TOOLBAR_CALLBACK': always_show_toolbar,
}

===============================================================================
SQL Server
===============================================================================

http://stackoverflow.com/questions/13726670/using-jython-with-django

- Microsoft SQL Server drivers:
  OLD: ODBC: https://msdn.microsoft.com/en-us/library/hh568451(v=sql.110).aspx
  NEW: JDBC: https://www.microsoft.com/en-gb/download/details.aspx?id=11774
  OPEN SOURCE: jTDS: http://jtds.sourceforge.net/

- Django-Jython supports zxJDBC, which supports SQL Server via jTDS:
  https://pythonhosted.org/django-jython/database-backends.html
  # 'ENGINE': 'doj.db.backends.mssql',

- Jython is Python in a JVM. It's not clear this is very easy to set up with Apache.
  https://www.mail-archive.com/pythonireland@googlegroups.com/msg00945.html

- Django (Python) support Microsoft SQL Server via django-mssql, but that is Windows only, and doesn't support Linux.
  http://django-mssql.readthedocs.org/en/latest/
  http://stackoverflow.com/questions/22604732/linux-django-sqlserver

- Another Python route, looking dated:
  Django / django-sqlserver / python-tds
  https://github.com/denisenkom/django-sqlserver  # BECOMING OUT OF DATE? SAYS IT CAN'T HANDLE DATETIME COLUMNS PROPERLY.
  # django-sqlserver was formerly called django-pytds
  # OLD # https://bitbucket.org/denisenkom/django-pytds
  https://pypi.python.org/pypi/python-tds
  
  http://python-tds.readthedocs.org/en/latest/

- Another Python route, looking more recent:
  Django / django-pymssql / pymssql / [?FreeTDS]
  https://github.com/aaugustin/django-pymssql
  http://www.pymssql.org/en/latest/

- Another Python route, but not Python 3:
  Django / django-pyodbc
  https://github.com/lionheart/django-pyodbc/
  http://stackoverflow.com/questions/24026608/sql-server-2008-2012-backend-module-for-django-on-linux
  http://stackoverflow.com/questions/2791766/django-pyodbc-sql-server-freetds-server-connection-problems-on-linux

TO READ:
http://blog.nguyenvq.com/blog/tag/jtds/


LIKELY BEST? AVOID JAVA. And jaydebeapi is a bit flaky, and doesn't integrate with Django as yet.

Django / django-pyodbc-azure / pyodbc / UnixODBC / FreeTDS
  http://stefanoapostolico.com/2015/04/20/django_mssql_osx.html
  https://github.com/michiya/django-pyodbc-azure
  https://github.com/mkleehammer/pyodbc
  http://www.unixodbc.org/
  http://www.freetds.org/

  +/- https://code.google.com/p/django-pyodbc/wiki/FreeTDS
  +/- http://stackoverflow.com/questions/24906016/exception-value-08001-08001-unixodbcfreetdssql-serverunable-to-con
  and http://stackoverflow.com/questions/20283199/django-pyodbc-azure-databaseerror-42000-42000-error-converting-data-type
  ... = how to set TDS protocol version with Django

... NB not old UnixODBC versions: https://github.com/michiya/django-pyodbc-azure/issues/4


SUMMARY: From Django onwards through the stack:

    django-jython
        zxJDBC
            jTDS
    django-mssql
        quasi-endorsed by Django but FAIL: needs Windows
    django-sqlserver
        POSSIBLE? django-sqlserver==1.7 -- BUGGY; tries to import "django.db.backends.util" (should be "utils") with Django 1.9rc1
    django-pyodbc-azure


-------------------------------------------------------------------------------
django-pyodbc-azure -> unixODBC -> FreeTDS -> SQL Server
-------------------------------------------------------------------------------
- https://github.com/michiya/django-pyodbc-azure/blob/azure/README.rst

1. On the Windows end (in this case, 192.168.1.13):

    (*) SQL Server Configuration Manager (from Windows Start menu)
        > SQL Server 2005 Network Configuration
        > Protocols for MSSQLSERVER
        > TCP/IP
        > Enabled (and double-click "TCP/IP" for more settings)

    (*) Create a database in Microsoft SQL Server Management Studio Express.
        e.g. crate_sqlserver_db

    (*) Create a user:
        Microsoft SQL Server Management Studio Express
        > [root server, e.g. WOMBATVMXP]
        > Security
        > Logins
        > (right-click: Add Login)
        >   Login name = crate_user
            SQL Server authentication
                password = something
            set sensible defaults like not requiring password change

    (*) Allow the user access
        Microsoft SQL Server Management Studio Express
        > New Query [button]
            USE crate_sqlserver_db;
            -- NOT SURE -- EXEC sp_grantdbaccess crate_user;
            -- DOESN'T DO MUCH -- GRANT ALL TO crate_user;
            EXEC sp_addrolemember 'db_owner', 'crate_user';

    (*) Allow proper logins via TCP/IP:
        Microsoft SQL Server Management Studio Express
        > [root server, e.g. WOMBATVMXP]
        > Security
        > Logins
        > (right-click: Properties)
        > Security
            Server authentication = SQL Server and Windows Authentication mode

    (*) Services > stop/restart "SQL Server (MSSQLSERVER)"

    (*) netstat -a
        ... to verify port 1433 is open (or "ms-sql-s")

    (*) from another machine, check the port is open:
        telnet 192.168.1.13 1433

    OK. Back to the Linux end.

2. Get latest FreeTDS (see also http://www.freetds.org/)

    $ sudo apt-get install freetds-bin tdsodbc

    ... note that tdsodbc is critical for /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so

3. Test the FreeTDS connection

    $ TDSVER=8.0 tsql -H 192.168.1.13 -p 1433 -U crate_user -P something

    Failure levels:
        "No route to host"
        "Connection refused"
            -- duff port or port not open
        "Login failed for user ''. The user is not associated with a trusted
        SQL Server connection." / "Adaptive Server connection failed"
            -- better... need to allow TCP/IP access
        "Cannot open user default database. Using master database instead."
            -- much better; need the grant command as above
    At the point of success:
        locale is "en_GB.UTF-8"
        locale charset is "UTF-8"
        using default charset "UTF-8"
        1>

    Then:
        1> SELECT * FROM notes
        2> GO
    Also:
        > VERSION
        ... to show TDS protocol version
    Which version? Choose from
        http://www.freetds.org/userguide/choosingtdsprotocol.htm
    ... but if you get "unrecognized msgno", go up.

4. Get unixODBC and nice tools

    $ sudo apt-get install unixodbc-bin

5. Configure ODBC

    - ignore /etc/freetds/freetds.conf
        ... though there are some optional [global] settings there

    - in /etc/odbcinst.ini

        [FreeTDS]
        Description = FreeTDS (SQL Server protocol driver for Unix)
        Driver = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so
        Setup = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so

    - in /etc/odbc.ini, or ~/.odbc.ini

        [crate_sqlserver_odbc]
        description = "CRATE test SQL Server 2005 database on Wombat VMXP"
        driver = FreeTDS
        TDS_Version = 8.0
        ; which TDS version setting is read, of the several possibilities? See http://stackoverflow.com/questions/13066716
        server = 192.168.1.13
        port = 1433

    $ odbcinst -j  # print config information
    $ odbcinst -q -d  # query drivers
    $ odbcinst -q -s  # query data sources
    $ ODBCManageDataSourcesQ4  # visual confirmation of everything

6. Configure Django

    - in settings.py:

        'research': {
            'ENGINE': 'sql_server.pyodbc',
            'NAME': 'crate_sqlserver_db',
            'USER': 'crate_user',
            'PASSWORD': 'something',
            'OPTIONS': {
                'dsn': 'crate_sqlserver_odbc',
            }
        },

    - should then work.
