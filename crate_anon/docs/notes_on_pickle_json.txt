- We were using django-picklefield and PickledObjectField.
- However, this fails in a nasty way if you add new attributes to a class
  that has been pickled, and anyway pickle is insecure (as it trusts its
  input).
- JSON is better.
  http://www.benfrederickson.com/dont-pickle-your-data/

- JSON fields in Django:
  https://djangopackages.org/grids/g/json-fields/

- http://paltman.com/how-to-store-arbitrary-data-in-a-django-model/

- Native Django JSONField requires PostgreSQL, and is not part of the core set
  of fields:

  https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/fields/#django.contrib.postgres.fields.JSONField
  https://docs.djangoproject.com/en/1.10/ref/models/fields/

- http://stackoverflow.com/questions/6578986/how-to-convert-json-data-into-a-python-object
- http://stackoverflow.com/questions/31235771/is-parsing-a-json-naively-into-a-python-class-or-struct-secure
- http://stackoverflow.com/questions/16405969/how-to-change-json-encoding-behaviour-for-serializable-python-object/16406798#16406798
- http://stackoverflow.com/questions/3768895/how-to-make-a-class-json-serializable

e.g.:


import inspect
import json
from typing import Any, Dict, Union

class Thing(object):
    def __init__(self, a: int = 1, b: str = ''):
        self.a = a
        self.b = b
    def __repr__(self) -> str:
        return "<Thing(a={}, b={}) at {}>".format(
            repr(self.a), repr(self.b), hex(id(self)))


MY_JSON_TYPES = {
    'Thing': Thing,
}
TYPE_LABEL = '__type__'

class MyEncoder(json.JSONEncoder):
    def default(self, obj: Any) -> Any:
        typename = type(obj).__name__
        if typename in MY_JSON_TYPES.keys():
            d = obj.__dict__
            d[TYPE_LABEL] = typename
            return d
        return super().default(obj)


class MyDecoder(json.JSONDecoder):  # INADEQUATE for nested things
    def decode(self, s: str) -> Any:
        o = super().decode(s)
        if isinstance(o, dict):
            typename = o.get(TYPE_LABEL, '')
            if typename and typename in MY_JSON_TYPES:
                classtype = MY_JSON_TYPES[typename]
                o.pop(TYPE_LABEL)
                return classtype(**o)
        return o


def my_decoder_hook(d: Dict) -> Any:
    if TYPE_LABEL in d:
        typename = d.get(TYPE_LABEL, '')
        if typename and typename in MY_JSON_TYPES:
            classtype = MY_JSON_TYPES[typename]
            d.pop(TYPE_LABEL)
            return classtype(**d)
    return d


x = Thing(a=5, b="hello")
y = [1, x, 2]

# Encoding:
j = MyEncoder().encode(x)  # OK
j2 = json.dumps(x, cls=MyEncoder)  # OK; same result

k = MyEncoder().encode(y)  # OK
k2 = json.dumps(y, cls=MyEncoder)  # OK; same result

# Decoding
x2 = MyDecoder().decode(j)  # OK, but simple structure
y2 = MyDecoder().decode(k)  # FAILS
y3 = json.JSONDecoder(object_hook=my_decoder_hook).decode(k)  # SUCCEEDS

print(repr(x))
print(repr(x2))
