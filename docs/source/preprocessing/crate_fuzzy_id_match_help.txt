usage: crate_fuzzy_id_match [-h] [--version] [--allhelp] [--verbose]
                            [--key KEY] [--allow_default_hash_key]
                            [--rounding_sf ROUNDING_SF]
                            [--forename_sex_freq_csv FORENAME_SEX_FREQ_CSV]
                            [--forename_cache_filename FORENAME_CACHE_FILENAME]
                            [--surname_freq_csv SURNAME_FREQ_CSV]
                            [--surname_cache_filename SURNAME_CACHE_FILENAME]
                            [--name_min_frequency NAME_MIN_FREQUENCY]
                            [--p_middle_name_n_present P_MIDDLE_NAME_N_PRESENT]
                            [--population_size POPULATION_SIZE]
                            [--birth_year_pseudo_range BIRTH_YEAR_PSEUDO_RANGE]
                            [--postcode_csv_filename POSTCODE_CSV_FILENAME]
                            [--postcode_cache_filename POSTCODE_CACHE_FILENAME]
                            [--mean_oa_population MEAN_OA_POPULATION]
                            [--p_not_male_or_female P_NOT_MALE_OR_FEMALE]
                            [--p_female_given_male_or_female P_FEMALE_GIVEN_MALE_OR_FEMALE]
                            [--p_minor_forename_error P_MINOR_FORENAME_ERROR]
                            [--p_minor_surname_error P_MINOR_SURNAME_ERROR]
                            [--p_proband_middle_name_missing P_PROBAND_MIDDLE_NAME_MISSING]
                            [--p_sample_middle_name_missing P_SAMPLE_MIDDLE_NAME_MISSING]
                            [--p_minor_postcode_error P_MINOR_POSTCODE_ERROR]
                            [--p_gender_error P_GENDER_ERROR]
                            [--min_log_odds_for_match MIN_LOG_ODDS_FOR_MATCH]
                            [--exceeds_next_best_log_odds EXCEEDS_NEXT_BEST_LOG_ODDS]
                            {selftest,speedtest,validate1,validate2_fetch_cdl,validate2_fetch_rio,hash,compare_plaintext,compare_hashed_to_hashed,compare_hashed_to_plaintext,show_metaphone,show_forename_freq,show_forename_metaphone_freq,show_surname_freq,show_surname_metaphone_freq,show_dob_freq}
                            ...

Identity matching via hashed fuzzy identifiers

optional arguments:
  -h, --help            show this help message and exit
  --version             show program's version number and exit
  --allhelp             show help for all commands and exit

display options:
  --verbose             Be verbose (default: False)

hasher (secrecy) options:
  --key KEY             Key (passphrase) for hasher (default: fuzzy_id_match_d
                        efault_hash_key_DO_NOT_USE_FOR_LIVE_DATA)
  --allow_default_hash_key
                        Allow the default hash key to be used beyond tests.
                        INADVISABLE! (default: False)
  --rounding_sf ROUNDING_SF
                        Number of significant figures to use when rounding
                        frequencies in hashed version (default: 5)

frequency information for prior probabilities:
  --forename_sex_freq_csv FORENAME_SEX_FREQ_CSV
                        CSV file of "name, sex, frequency" pairs for
                        forenames. You can generate one via
                        crate_fetch_wordlists. (default:
                        /path/to/names/directory/us_forename_sex_freq.csv)
  --forename_cache_filename FORENAME_CACHE_FILENAME
                        File in which to store cached forename info (to speed
                        loading) (default:
                        /path/to/crate/user/data/fuzzy_forename_cache.pickle)
  --surname_freq_csv SURNAME_FREQ_CSV
                        CSV file of "name, frequency" pairs for forenames. You
                        can generate one via crate_fetch_wordlists. (default:
                        /path/to/names/directory/us_surname_freq.csv)
  --surname_cache_filename SURNAME_CACHE_FILENAME
                        File in which to store cached surname info (to speed
                        loading) (default:
                        /path/to/crate/user/data/fuzzy_surname_cache.pickle)
  --name_min_frequency NAME_MIN_FREQUENCY
                        Minimum base frequency for names. If a frequency is
                        less than this, use this minimum. Allowing extremely
                        low frequencies may increase the chances of a spurious
                        match. Note also that typical name frequency tables
                        don't give very-low-frequency information. For
                        example, for US census forename/surname information,
                        below 0.001 percent they report 0.000 percent; so a
                        reasonable minimum is 0.0005 percent or 0.000005 or
                        5e-6. (default: 5e-06)
  --p_middle_name_n_present P_MIDDLE_NAME_N_PRESENT
                        CSV list of probabilities that a randomly selected
                        person has a certain number of middle names. The first
                        number is P(has a first middle name). The second
                        number is P(has a second middle name | has a first
                        middle name), and so on. The last number present will
                        be re-used ad infinitum if someone has more names.
                        (default: 0.8,0.1375)
  --population_size POPULATION_SIZE
                        Size of the whole population, from which we calculate
                        the baseline log odds that two people, randomly
                        selected (and replaced) from the population are the
                        same person. (default: 66040000)
  --birth_year_pseudo_range BIRTH_YEAR_PSEUDO_RANGE
                        Birth year pseudo-range. The sole purpose is to
                        calculate the probability of two random people sharing
                        a DOB, which is taken as 1/(365.25 * b). This option
                        is b. (default: 90)
  --postcode_csv_filename POSTCODE_CSV_FILENAME
                        CSV file of postcode geography from UK Census/ONS data
                        (default: /path/to/postcodes/file)
  --postcode_cache_filename POSTCODE_CACHE_FILENAME
                        File in which to store cached postcodes (to speed
                        loading) (default:
                        /path/to/crate/user/data/fuzzy_postcode_cache.pickle)
  --mean_oa_population MEAN_OA_POPULATION
                        Mean population of a UK Census Output Area, from which
                        we estimate the population of postcode-based units.
                        (default: 309)
  --p_not_male_or_female P_NOT_MALE_OR_FEMALE
                        Probability that a person in the population has gender
                        'X'. (default: 0.004)
  --p_female_given_male_or_female P_FEMALE_GIVEN_MALE_OR_FEMALE
                        Probability that a person in the population is female,
                        given that they are either male or female. (default:
                        0.51)

error probabilities:
  --p_minor_forename_error P_MINOR_FORENAME_ERROR
                        Assumed probability that a forename has an error in
                        that means it fails a full match but satisfies a
                        partial (metaphone) match. (default: 0.001)
  --p_minor_surname_error P_MINOR_SURNAME_ERROR
                        Assumed probability that a surname has an error in
                        that means it fails a full match but satisfies a
                        partial (metaphone) match. (default: 0.001)
  --p_proband_middle_name_missing P_PROBAND_MIDDLE_NAME_MISSING
                        Probability that a middle name, present in the sample,
                        is missing from the proband. (default: 0.05)
  --p_sample_middle_name_missing P_SAMPLE_MIDDLE_NAME_MISSING
                        Probability that a middle name, present in the
                        proband, is missing from the sample. (default: 0.05)
  --p_minor_postcode_error P_MINOR_POSTCODE_ERROR
                        Assumed probability that a postcode has an error in
                        that means it fails a full (postcode unit) match but
                        satisfies a partial (postcode sector) match. (default:
                        0.001)
  --p_gender_error P_GENDER_ERROR
                        Assumed probability that a gender is wrong leading to
                        a proband/candidate mismatch. (default: 0.0001)

matching rules:
  --min_log_odds_for_match MIN_LOG_ODDS_FOR_MATCH
                        Minimum natural log (ln) odds of two people being the
                        same, before a match will be considered. (Default is
                        equivalent to p = 0.999.) (default: 6.906754778648553)
  --exceeds_next_best_log_odds EXCEEDS_NEXT_BEST_LOG_ODDS
                        Minimum log (ln) odds by which a best match must
                        exceed the next-best match to be considered a unique
                        match. (default: 10)

commands:
  Valid commands are as follows.

  {selftest,speedtest,validate1,validate2_fetch_cdl,validate2_fetch_rio,hash,compare_plaintext,compare_hashed_to_hashed,compare_hashed_to_plaintext,show_metaphone,show_forename_freq,show_forename_metaphone_freq,show_surname_freq,show_surname_metaphone_freq,show_dob_freq}
                        Specify one command.
    selftest            Run self-tests and stop
    speedtest           Run speed tests and stop
    validate1           Run validation test 1 and stop. In this test, a list
                        of people is compared to a version of itself, at times
                        with elements deleted or with typos introduced.
    validate2_fetch_cdl
                        Validation 2A: fetch people from CPFT CDL database
    validate2_fetch_rio
                        Validation 2B: fetch people from CPFT RiO database
    hash                STEP 1 OF DE-IDENTIFIED LINKAGE. Hash an identifiable
                        CSV file into an encrypted one.
    compare_plaintext   IDENTIFIABLE LINKAGE COMMAND. Compare a list of
                        probands against a sample (both in plaintext).
    compare_hashed_to_hashed
                        STEP 2 OF DE-IDENTIFIED LINKAGE (for when you have de-
                        identified both sides in advance). Compare a list of
                        probands against a sample (both hashed).
    compare_hashed_to_plaintext
                        STEP 2 OF DE-IDENTIFIED LINKAGE (for when you have
                        received de-identified data and you want to link to
                        your identifiable data, producing a de-identified
                        result). Compare a list of probands (hashed) against a
                        sample (plaintext).
    show_metaphone      Show metaphones of words
    show_forename_freq  Show frequencies of forenames
    show_forename_metaphone_freq
                        Show frequencies of forename metaphones
    show_surname_freq   Show frequencies of surnames
    show_surname_metaphone_freq
                        Show frequencies of surname metaphones
    show_dob_freq       Show the frequency of any DOB

===============================================================================
Help for command 'selftest'
===============================================================================
usage: crate_fuzzy_id_match selftest [-h]

This will run a bunch of self-tests and crash out if one fails.

optional arguments:
  -h, --help  show this help message and exit

===============================================================================
Help for command 'speedtest'
===============================================================================
usage: crate_fuzzy_id_match speedtest [-h] [--profile]

This will run several comparisons to test hashing and comparison speed.
Results are reported as microseconds per comparison.

optional arguments:
  -h, --help  show this help message and exit
  --profile   Profile (makes things slower but shows you what's taking the
              time). (default: False)

===============================================================================
Help for command 'validate1'
===============================================================================
usage: crate_fuzzy_id_match validate1 [-h] [--people PEOPLE] [--output OUTPUT]
                                      [--seed SEED]

    Takes an identifiable list of people (typically a short list of imaginary
    people!) and validates the matching process.

    This is done by splitting the input list into two groups (alternating),
    then comparing a list of probands either against itself (there should be
    matches) or against the other group (there should generally not be).
    The process is carried out in cleartext (plaintext) and hashed. At times
    it's made harder by introducing deletions or mutations (typos) into one of
    the groups.

    Here's a specimen test CSV file to use, with entirely made-up people and
    institutional (not personal) postcodes in Cambridge:

original_id,research_id,first_name,middle_names,surname,dob,gender,postcodes
1,r1,Alice,Zara,Smith,1931-01-01,F,CB2 0QQ
2,r2,Bob,Yorick,Jones,1932-01-01,M,CB2 3EB
3,r3,Celia,Xena,Wright,1933-01-01,F,CB2 1TP
4,r4,David,William;Wallace,Cartwright,1934-01-01,M,CB2 8PH;CB2 1TP
5,r5,Emily,Violet,Fisher,1935-01-01,F,CB3 9DF
6,r6,Frank,Umberto,Williams,1936-01-01,M,CB2 1TQ
7,r7,Greta,Tilly,Taylor,1937-01-01,F,CB2 1DQ
8,r8,Harry,Samuel,Davies,1938-01-01,M,CB3 9ET
9,r9,Iris,Ruth,Evans,1939-01-01,F,CB3 0DG
10,r10,James,Quentin,Thomas,1940-01-01,M,CB2 0SZ
11,r11,Alice,,Smith,1931-01-01,F,CB2 0QQ

    Explanation of the output format:

    - 'collection_name' is a human-readable name summarizing the next four;
    - 'in_sample' (boolean) is whether the probands are in the sample;
    - 'deletions' (boolean) is whether random items have been deleted from
       the probands;
    - 'typos' (boolean) is whether random typos have been made in the
       probands;

    - 'is_hashed' (boolean) is whether the proband and sample are hashed;
    - 'original_id' is the gold-standard ID of the proband;
    - 'winner_id' is the ID of the best-matching person in the sample if they
      were a good enough match to win;
    - 'best_match_id' is the ID of the best-matching person in the sample;
    - 'best_log_odds' is the calculated log (ln) odds that the proband and the
      sample member identified by 'winner_id' are the sample person (ideally
      high if there is a true match, low if not);
    - 'second_best_log_odds' is the calculated log odds of the proband and the
      runner-up being the same person (ideally low);
    - 'second_best_match_id' is the ID of the second-best matching person, if
      there is one;

    - 'correct_if_winner' is whether the proband and winner IDs are te same
      (ideally true);
    - 'leader_advantage' is the log odds by which the winner beats the
      runner-up (ideally high indicating a strong preference for the winner
      over the runner-up).

    Clearly, if the probands are in the sample, then a match may occur; if not,
    no match should occur. If hashing is in use, this tests de-identified
    linkage; if not, this tests identifiable linkage. Deletions and typos
    may reduce (but we hope not always eliminate) the likelihood of a match,
    and we don't want to see mismatches.

    For n input rows, each basic set test involves n^2/2 comparisons.
    Then we repeat for typos and deletions. (There is no point in DOB typos
    as our rules preclude that.)

    Examine:
    - P(unique plaintext match | proband in sample) -- should be close to 1.
    - P(unique plaintext match | proband in others) -- should be close to 0.
    - P(unique hashed match | proband in sample) -- should be close to 1.
    - P(unique hashed match | proband in others) -- should be close to 0.

optional arguments:
  -h, --help       show this help message and exit
  --people PEOPLE  CSV filename for validation 1 data. Header row present.
                   Columns: ['original_id', 'research_id', 'first_name',
                   'middle_names', 'surname', 'dob', 'gender', 'postcodes'].
                   Semicolon-separated values may be within ['middle_names',
                   'postcodes']. (default:
                   /path/to/names/directory/fuzzy_validation1_people.csv)
  --output OUTPUT  Output CSV file for validation. Header row present.
                   Columns: ['collection_name', 'in_sample', 'deletions',
                   'typos', 'is_hashed', 'original_id', 'winner_id',
                   'best_match_id', 'best_log_odds', 'second_best_log_odds',
                   'second_best_match_id', 'correct_if_winner',
                   'leader_advantage']. (default:
                   /path/to/names/directory/fuzzy_validation1_output.csv)
  --seed SEED      Random number seed, for introducing deliberate errors in
                   validation test 1 (default: 1234)

===============================================================================
Help for command 'validate2_fetch_cdl'
===============================================================================
usage: crate_fuzzy_id_match validate2_fetch_cdl [-h] --url URL [--echo]
                                                [--output OUTPUT]

    Validation #2. Sequence:

    1. Fetch

    - crate_fuzzy_id_match validate2_fetch_cdl --output validate2_cdl_DANGER_IDENTIFIABLE.csv --url <SQLALCHEMY_URL_CDL>
    - crate_fuzzy_id_match validate2_fetch_rio --output validate2_rio_DANGER_IDENTIFIABLE.csv --url <SQLALCHEMY_URL_RIO>

    2. Hash

    - crate_fuzzy_id_match hash --input validate2_cdl_DANGER_IDENTIFIABLE.csv --output validate2_cdl_hashed.csv --include_original_id --allow_default_hash_key
    - crate_fuzzy_id_match hash --input validate2_rio_DANGER_IDENTIFIABLE.csv --output validate2_rio_hashed.csv --include_original_id --allow_default_hash_key

    3. Compare

    - crate_fuzzy_id_match compare_plaintext --population_size 852523 --probands validate2_cdl_DANGER_IDENTIFIABLE.csv --sample validate2_rio_DANGER_IDENTIFIABLE.csv --output cdl_to_rio_plaintext.csv --extra_validation_output
    - crate_fuzzy_id_match compare_hashed_to_hashed --population_size 852523 --probands validate2_cdl_hashed.csv --sample validate2_rio_hashed.csv --output cdl_to_rio_hashed.csv --extra_validation_output
    - crate_fuzzy_id_match compare_plaintext --population_size 852523 --probands validate2_rio_DANGER_IDENTIFIABLE.csv --sample validate2_cdl_DANGER_IDENTIFIABLE.csv --output rio_to_cdl_plaintext.csv --extra_validation_output
    - crate_fuzzy_id_match compare_hashed_to_hashed --population_size 852523 --probands validate2_rio_hashed.csv --sample validate2_cdl_hashed.csv --output rio_to_cdl_hashed.csv --extra_validation_output

optional arguments:
  -h, --help       show this help message and exit
  --url URL        SQLAlchemy URL for CPFT CDL source (IDENTIFIABLE) database
                   (default: None)
  --echo           Echo SQL? (default: False)
  --output OUTPUT  CSV filename for output (plaintext, IDENTIFIABLE) data.
                   Header row present. Columns: ['original_id', 'research_id',
                   'first_name', 'middle_names', 'surname', 'dob', 'gender',
                   'postcodes']. Semicolon-separated values may be within
                   ['middle_names', 'postcodes']. (default: /path/to/names/dir
                   ectory/validate2_cdl_DANGER_IDENTIFIABLE.csv)

===============================================================================
Help for command 'validate2_fetch_rio'
===============================================================================
usage: crate_fuzzy_id_match validate2_fetch_rio [-h] --url URL [--echo]
                                                [--output OUTPUT]

See validate2_fetch_cdl command.

optional arguments:
  -h, --help       show this help message and exit
  --url URL        SQLAlchemy URL for CPFT RiO source (IDENTIFIABLE) database
                   (default: None)
  --echo           Echo SQL? (default: False)
  --output OUTPUT  CSV filename for output (plaintext, IDENTIFIABLE) data.
                   Header row present. Columns: ['original_id', 'research_id',
                   'first_name', 'middle_names', 'surname', 'dob', 'gender',
                   'postcodes']. Semicolon-separated values may be within
                   ['middle_names', 'postcodes']. (default: /path/to/names/dir
                   ectory/validate2_rio_DANGER_IDENTIFIABLE.csv)

===============================================================================
Help for command 'hash'
===============================================================================
usage: crate_fuzzy_id_match hash [-h] [--input INPUT] [--output OUTPUT]
                                 [--without_frequencies]
                                 [--include_original_id]

    Takes an identifiable list of people (with name, DOB, and postcode
    information) and creates a hashed, de-identified equivalent.

    The research ID (presumed not to be a direct identifier) is preserved.
    Optionally, the unique original ID (e.g. NHS number, presumed to be a
    direct identifier) is preserved, but you have to ask for that explicitly.
        

optional arguments:
  -h, --help            show this help message and exit
  --input INPUT         CSV filename for input (plaintext) data. Header row
                        present. Columns: ['original_id', 'research_id',
                        'first_name', 'middle_names', 'surname', 'dob',
                        'gender', 'postcodes']. Semicolon-separated values may
                        be within ['middle_names', 'postcodes']. (default:
                        /path/to/names/directory/fuzzy_probands.csv)
  --output OUTPUT       Output CSV file for hashed version. Header row
                        present. Columns: ['original_id', 'research_id',
                        'hashed_first_name', 'first_name_frequency',
                        'hashed_first_name_metaphone',
                        'first_name_metaphone_frequency',
                        'hashed_middle_names', 'middle_name_frequencies',
                        'hashed_middle_name_metaphones',
                        'middle_name_metaphone_frequencies', 'hashed_surname',
                        'surname_frequency', 'hashed_surname_metaphone',
                        'surname_metaphone_frequency', 'hashed_dob',
                        'hashed_gender', 'gender_frequency',
                        'hashed_postcode_units', 'postcode_unit_frequencies',
                        'hashed_postcode_sectors',
                        'postcode_sector_frequencies']. Semicolon-separated
                        values may be within ['hashed_middle_name_metaphones',
                        'hashed_middle_names', 'hashed_postcode_sectors',
                        'hashed_postcode_units', 'middle_name_frequencies',
                        'middle_name_metaphone_frequencies',
                        'postcode_sector_frequencies',
                        'postcode_unit_frequencies']. (default:
                        /path/to/names/directory/fuzzy_probands_hashed.csv)
  --without_frequencies
                        Do not include frequency information. This makes the
                        result suitable for use as a sample file, but not a
                        proband file. (default: False)
  --include_original_id
                        Include the (potentially identifying) 'original_id'
                        data? Usually False; may be set to True for
                        validation. (default: False)

===============================================================================
Help for command 'compare_plaintext'
===============================================================================
usage: crate_fuzzy_id_match compare_plaintext [-h] [--probands PROBANDS]
                                              [--sample SAMPLE]
                                              [--sample_cache SAMPLE_CACHE]
                                              [--output OUTPUT]
                                              [--extra_validation_output]
                                              [--n_workers N_WORKERS]
                                              [--max_chunksize MAX_CHUNKSIZE]
                                              [--profile]

    Comparison rules:

    - People MUST match on DOB and surname (or surname metaphone), or hashed
      equivalents, to be considered a plausible match.
    - Only plausible matches proceed to the Bayesian comparison.

    Output file format:

    - CSV file with header.
    - Columns: ['proband_original_id', 'proband_research_id', 'matched', 'log_odds_match', 'p_match', 'sample_match_original_id', 'sample_match_research_id', 'second_best_log_odds']

      - proband_original_id
        Original (identifiable?) ID of the proband. Taken from the input.
        Optional -- may be blank for de-identified comparisons.

      - proband_research_id
        Research ID (de-identified?) of the proband. Taken from the input.

      - matched
        Boolean. Was a matching person (a "winner") found in the sample, who
        is to be considered a match to the proband? To give a match requires
        (a) that the log odds for the winner reaches a threshold, and (b) that
        the log odds for the winner exceeds the log odds for the runner-up by
        a certain amount (because a mismatch may be worse than a failed match).

      - log_odds_match
        Log (ln) odds that the winner in the sample is a match to the proband.

      - p_match
        Probability that the winner in the sample is a match.

      - sample_match_original_id
        Original ID of the "winner" in the sample (the closest match to the
        proband). Optional -- may be blank for de-identified comparisons.

      - sample_match_research_id
        Research ID of the winner in the sample.

      - second_best_log_odds
        Log odds of the runner up (the second-closest match) being the same
        person as the proband.

    - If '--extra_validation_output' is used, the following columns are added:

      - best_person_original_id
        Original ID of the closest-matching person in the sample, EVEN IF THEY
        DID NOT WIN.

      - best_person_research_id
        Research ID of the closest-matching person in the sample, EVEN IF THEY
        DID NOT WIN.

    - The results file is NOT necessarily sorted as the input proband file was
      (not sorting improves parallel processing efficiency).

optional arguments:
  -h, --help            show this help message and exit
  --probands PROBANDS   CSV filename for probands data. Header row present.
                        Columns: ['original_id', 'research_id',
                        'hashed_first_name', 'first_name_frequency',
                        'hashed_first_name_metaphone',
                        'first_name_metaphone_frequency',
                        'hashed_middle_names', 'middle_name_frequencies',
                        'hashed_middle_name_metaphones',
                        'middle_name_metaphone_frequencies', 'hashed_surname',
                        'surname_frequency', 'hashed_surname_metaphone',
                        'surname_metaphone_frequency', 'hashed_dob',
                        'hashed_gender', 'gender_frequency',
                        'hashed_postcode_units', 'postcode_unit_frequencies',
                        'hashed_postcode_sectors',
                        'postcode_sector_frequencies']. Semicolon-separated
                        values may be within ['hashed_middle_name_metaphones',
                        'hashed_middle_names', 'hashed_postcode_sectors',
                        'hashed_postcode_units', 'middle_name_frequencies',
                        'middle_name_metaphone_frequencies',
                        'postcode_sector_frequencies',
                        'postcode_unit_frequencies']. (default:
                        /path/to/names/directory/fuzzy_probands.csv)
  --sample SAMPLE       CSV filename for sample data. Header row present.
                        Columns: ['original_id', 'research_id',
                        'hashed_first_name', 'first_name_frequency',
                        'hashed_first_name_metaphone',
                        'first_name_metaphone_frequency',
                        'hashed_middle_names', 'middle_name_frequencies',
                        'hashed_middle_name_metaphones',
                        'middle_name_metaphone_frequencies', 'hashed_surname',
                        'surname_frequency', 'hashed_surname_metaphone',
                        'surname_metaphone_frequency', 'hashed_dob',
                        'hashed_gender', 'gender_frequency',
                        'hashed_postcode_units', 'postcode_unit_frequencies',
                        'hashed_postcode_sectors',
                        'postcode_sector_frequencies']. Semicolon-separated
                        values may be within ['hashed_middle_name_metaphones',
                        'hashed_middle_names', 'hashed_postcode_sectors',
                        'hashed_postcode_units', 'middle_name_frequencies',
                        'middle_name_metaphone_frequencies',
                        'postcode_sector_frequencies',
                        'postcode_unit_frequencies']. (default:
                        /path/to/names/directory/fuzzy_sample.csv)
  --sample_cache SAMPLE_CACHE
                        File in which to store cached sample info (to speed
                        loading) (default: None)
  --output OUTPUT       Output CSV file for proband/sample comparison.
                        (default:
                        /path/to/names/directory/fuzzy_output_p2p.csv)
  --extra_validation_output
                        Add extra output for validation purposes. (default:
                        False)
  --n_workers N_WORKERS
                        Number of processes to use in parallel. (default: 8)
  --max_chunksize MAX_CHUNKSIZE
                        Maximum chunk size (number of probands to pass to a
                        subprocess each time). (default: 500)
  --profile             Profile the code (for development only). (default:
                        False)

===============================================================================
Help for command 'compare_hashed_to_hashed'
===============================================================================
usage: crate_fuzzy_id_match compare_hashed_to_hashed [-h]
                                                     [--probands PROBANDS]
                                                     [--sample SAMPLE]
                                                     [--sample_cache SAMPLE_CACHE]
                                                     [--output OUTPUT]
                                                     [--extra_validation_output]
                                                     [--n_workers N_WORKERS]
                                                     [--max_chunksize MAX_CHUNKSIZE]
                                                     [--profile]

    Comparison rules:

    - People MUST match on DOB and surname (or surname metaphone), or hashed
      equivalents, to be considered a plausible match.
    - Only plausible matches proceed to the Bayesian comparison.

    Output file format:

    - CSV file with header.
    - Columns: ['proband_original_id', 'proband_research_id', 'matched', 'log_odds_match', 'p_match', 'sample_match_original_id', 'sample_match_research_id', 'second_best_log_odds']

      - proband_original_id
        Original (identifiable?) ID of the proband. Taken from the input.
        Optional -- may be blank for de-identified comparisons.

      - proband_research_id
        Research ID (de-identified?) of the proband. Taken from the input.

      - matched
        Boolean. Was a matching person (a "winner") found in the sample, who
        is to be considered a match to the proband? To give a match requires
        (a) that the log odds for the winner reaches a threshold, and (b) that
        the log odds for the winner exceeds the log odds for the runner-up by
        a certain amount (because a mismatch may be worse than a failed match).

      - log_odds_match
        Log (ln) odds that the winner in the sample is a match to the proband.

      - p_match
        Probability that the winner in the sample is a match.

      - sample_match_original_id
        Original ID of the "winner" in the sample (the closest match to the
        proband). Optional -- may be blank for de-identified comparisons.

      - sample_match_research_id
        Research ID of the winner in the sample.

      - second_best_log_odds
        Log odds of the runner up (the second-closest match) being the same
        person as the proband.

    - If '--extra_validation_output' is used, the following columns are added:

      - best_person_original_id
        Original ID of the closest-matching person in the sample, EVEN IF THEY
        DID NOT WIN.

      - best_person_research_id
        Research ID of the closest-matching person in the sample, EVEN IF THEY
        DID NOT WIN.

    - The results file is NOT necessarily sorted as the input proband file was
      (not sorting improves parallel processing efficiency).

optional arguments:
  -h, --help            show this help message and exit
  --probands PROBANDS   CSV filename for probands data. Header row present.
                        Columns: ['original_id', 'research_id',
                        'hashed_first_name', 'first_name_frequency',
                        'hashed_first_name_metaphone',
                        'first_name_metaphone_frequency',
                        'hashed_middle_names', 'middle_name_frequencies',
                        'hashed_middle_name_metaphones',
                        'middle_name_metaphone_frequencies', 'hashed_surname',
                        'surname_frequency', 'hashed_surname_metaphone',
                        'surname_metaphone_frequency', 'hashed_dob',
                        'hashed_gender', 'gender_frequency',
                        'hashed_postcode_units', 'postcode_unit_frequencies',
                        'hashed_postcode_sectors',
                        'postcode_sector_frequencies']. Semicolon-separated
                        values may be within ['hashed_middle_name_metaphones',
                        'hashed_middle_names', 'hashed_postcode_sectors',
                        'hashed_postcode_units', 'middle_name_frequencies',
                        'middle_name_metaphone_frequencies',
                        'postcode_sector_frequencies',
                        'postcode_unit_frequencies']. (default:
                        /path/to/names/directory/fuzzy_probands_hashed.csv)
  --sample SAMPLE       CSV filename for sample data. Header row present.
                        Columns: ['original_id', 'research_id',
                        'hashed_first_name', 'first_name_frequency',
                        'hashed_first_name_metaphone',
                        'first_name_metaphone_frequency',
                        'hashed_middle_names', 'middle_name_frequencies',
                        'hashed_middle_name_metaphones',
                        'middle_name_metaphone_frequencies', 'hashed_surname',
                        'surname_frequency', 'hashed_surname_metaphone',
                        'surname_metaphone_frequency', 'hashed_dob',
                        'hashed_gender', 'gender_frequency',
                        'hashed_postcode_units', 'postcode_unit_frequencies',
                        'hashed_postcode_sectors',
                        'postcode_sector_frequencies']. Semicolon-separated
                        values may be within ['hashed_middle_name_metaphones',
                        'hashed_middle_names', 'hashed_postcode_sectors',
                        'hashed_postcode_units', 'middle_name_frequencies',
                        'middle_name_metaphone_frequencies',
                        'postcode_sector_frequencies',
                        'postcode_unit_frequencies']. (default:
                        /path/to/names/directory/fuzzy_sample_hashed.csv)
  --sample_cache SAMPLE_CACHE
                        File in which to store cached sample info (to speed
                        loading) (default: None)
  --output OUTPUT       Output CSV file for proband/sample comparison.
                        (default:
                        /path/to/names/directory/fuzzy_output_h2h.csv)
  --extra_validation_output
                        Add extra output for validation purposes. (default:
                        False)
  --n_workers N_WORKERS
                        Number of processes to use in parallel. (default: 8)
  --max_chunksize MAX_CHUNKSIZE
                        Maximum chunk size (number of probands to pass to a
                        subprocess each time). (default: 500)
  --profile             Profile the code (for development only). (default:
                        False)

===============================================================================
Help for command 'compare_hashed_to_plaintext'
===============================================================================
usage: crate_fuzzy_id_match compare_hashed_to_plaintext [-h]
                                                        [--probands PROBANDS]
                                                        [--sample SAMPLE]
                                                        [--sample_cache SAMPLE_CACHE]
                                                        [--output OUTPUT]
                                                        [--extra_validation_output]
                                                        [--n_workers N_WORKERS]
                                                        [--max_chunksize MAX_CHUNKSIZE]
                                                        [--profile]

    Comparison rules:

    - People MUST match on DOB and surname (or surname metaphone), or hashed
      equivalents, to be considered a plausible match.
    - Only plausible matches proceed to the Bayesian comparison.

    Output file format:

    - CSV file with header.
    - Columns: ['proband_original_id', 'proband_research_id', 'matched', 'log_odds_match', 'p_match', 'sample_match_original_id', 'sample_match_research_id', 'second_best_log_odds']

      - proband_original_id
        Original (identifiable?) ID of the proband. Taken from the input.
        Optional -- may be blank for de-identified comparisons.

      - proband_research_id
        Research ID (de-identified?) of the proband. Taken from the input.

      - matched
        Boolean. Was a matching person (a "winner") found in the sample, who
        is to be considered a match to the proband? To give a match requires
        (a) that the log odds for the winner reaches a threshold, and (b) that
        the log odds for the winner exceeds the log odds for the runner-up by
        a certain amount (because a mismatch may be worse than a failed match).

      - log_odds_match
        Log (ln) odds that the winner in the sample is a match to the proband.

      - p_match
        Probability that the winner in the sample is a match.

      - sample_match_original_id
        Original ID of the "winner" in the sample (the closest match to the
        proband). Optional -- may be blank for de-identified comparisons.

      - sample_match_research_id
        Research ID of the winner in the sample.

      - second_best_log_odds
        Log odds of the runner up (the second-closest match) being the same
        person as the proband.

    - If '--extra_validation_output' is used, the following columns are added:

      - best_person_original_id
        Original ID of the closest-matching person in the sample, EVEN IF THEY
        DID NOT WIN.

      - best_person_research_id
        Research ID of the closest-matching person in the sample, EVEN IF THEY
        DID NOT WIN.

    - The results file is NOT necessarily sorted as the input proband file was
      (not sorting improves parallel processing efficiency).

optional arguments:
  -h, --help            show this help message and exit
  --probands PROBANDS   CSV filename for probands data. Header row present.
                        Columns: ['original_id', 'research_id',
                        'hashed_first_name', 'first_name_frequency',
                        'hashed_first_name_metaphone',
                        'first_name_metaphone_frequency',
                        'hashed_middle_names', 'middle_name_frequencies',
                        'hashed_middle_name_metaphones',
                        'middle_name_metaphone_frequencies', 'hashed_surname',
                        'surname_frequency', 'hashed_surname_metaphone',
                        'surname_metaphone_frequency', 'hashed_dob',
                        'hashed_gender', 'gender_frequency',
                        'hashed_postcode_units', 'postcode_unit_frequencies',
                        'hashed_postcode_sectors',
                        'postcode_sector_frequencies']. Semicolon-separated
                        values may be within ['hashed_middle_name_metaphones',
                        'hashed_middle_names', 'hashed_postcode_sectors',
                        'hashed_postcode_units', 'middle_name_frequencies',
                        'middle_name_metaphone_frequencies',
                        'postcode_sector_frequencies',
                        'postcode_unit_frequencies']. (default:
                        /path/to/names/directory/fuzzy_probands_hashed.csv)
  --sample SAMPLE       CSV filename for sample data. Header row present.
                        Columns: ['original_id', 'research_id',
                        'hashed_first_name', 'first_name_frequency',
                        'hashed_first_name_metaphone',
                        'first_name_metaphone_frequency',
                        'hashed_middle_names', 'middle_name_frequencies',
                        'hashed_middle_name_metaphones',
                        'middle_name_metaphone_frequencies', 'hashed_surname',
                        'surname_frequency', 'hashed_surname_metaphone',
                        'surname_metaphone_frequency', 'hashed_dob',
                        'hashed_gender', 'gender_frequency',
                        'hashed_postcode_units', 'postcode_unit_frequencies',
                        'hashed_postcode_sectors',
                        'postcode_sector_frequencies']. Semicolon-separated
                        values may be within ['hashed_middle_name_metaphones',
                        'hashed_middle_names', 'hashed_postcode_sectors',
                        'hashed_postcode_units', 'middle_name_frequencies',
                        'middle_name_metaphone_frequencies',
                        'postcode_sector_frequencies',
                        'postcode_unit_frequencies']. (default:
                        /path/to/names/directory/fuzzy_sample.csv)
  --sample_cache SAMPLE_CACHE
                        File in which to store cached sample info (to speed
                        loading) (default: None)
  --output OUTPUT       Output CSV file for proband/sample comparison.
                        (default:
                        /path/to/names/directory/fuzzy_output_h2p.csv)
  --extra_validation_output
                        Add extra output for validation purposes. (default:
                        False)
  --n_workers N_WORKERS
                        Number of processes to use in parallel. (default: 8)
  --max_chunksize MAX_CHUNKSIZE
                        Maximum chunk size (number of probands to pass to a
                        subprocess each time). (default: 500)
  --profile             Profile the code (for development only). (default:
                        False)

===============================================================================
Help for command 'show_metaphone'
===============================================================================
usage: crate_fuzzy_id_match show_metaphone [-h] words [words ...]

positional arguments:
  words       Words to check

optional arguments:
  -h, --help  show this help message and exit

===============================================================================
Help for command 'show_forename_freq'
===============================================================================
usage: crate_fuzzy_id_match show_forename_freq [-h] forenames [forenames ...]

positional arguments:
  forenames   Forenames to check

optional arguments:
  -h, --help  show this help message and exit

===============================================================================
Help for command 'show_forename_metaphone_freq'
===============================================================================
usage: crate_fuzzy_id_match show_forename_metaphone_freq [-h]
                                                         metaphones
                                                         [metaphones ...]

positional arguments:
  metaphones  Forenames to check

optional arguments:
  -h, --help  show this help message and exit

===============================================================================
Help for command 'show_surname_freq'
===============================================================================
usage: crate_fuzzy_id_match show_surname_freq [-h] surnames [surnames ...]

positional arguments:
  surnames    surnames to check

optional arguments:
  -h, --help  show this help message and exit

===============================================================================
Help for command 'show_surname_metaphone_freq'
===============================================================================
usage: crate_fuzzy_id_match show_surname_metaphone_freq [-h]
                                                        metaphones
                                                        [metaphones ...]

positional arguments:
  metaphones  surnames to check

optional arguments:
  -h, --help  show this help message and exit

===============================================================================
Help for command 'show_dob_freq'
===============================================================================
usage: crate_fuzzy_id_match show_dob_freq [-h]

optional arguments:
  -h, --help  show this help message and exit

